from spottunet.torch.utils import freeze_model_spottune, load_model_state_fold_wise, modify_state_fn_spottune
from spottunet.paths import BASELINE_PATH


saved_model_path_main = 'model_main.pth'
saved_model_path_policy = 'model_policy.pth'

baseline_exp_path = BASELINE_PATH

run_experiment = run(
    fix_seed(seed=0xBAAAAAAD),
    lock_dir(),

    load_model_state_fold_wise(architecture=architecture_main, baseline_exp_path=baseline_exp_path,
                               modify_state_fn=modify_state_fn_spottune, n_folds=len(dataset.df.fold.unique()),
                               n_first_exclude=n_first_exclude),

    freeze_model_spottune(architecture_main),
    architecture_main.to(device),
    architecture_policy.to(device),

    if_missing(lambda p_main, p_policy: [train_model, save_model_state(architecture_main, p_main),
                                        save_model_state(architecture_policy, p_policy)],
                                        saved_model_path_main, saved_model_path_policy),

    architecture_main.save_policy('policy_training_record'),

    load_model_state(architecture_main, saved_model_path_main),
    load_model_state(architecture_policy, saved_model_path_policy),

    if_missing(predict_to_dir, output_path=test_predictions_path),
    if_missing(evaluate_individual_metrics, results_path='test_metrics'),

    architecture_main.save_policy('policy_inference_record')
)
