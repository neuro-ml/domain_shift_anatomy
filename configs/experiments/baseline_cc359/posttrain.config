from ...assets.core import *
from ...assets.no_pred import *
from ...assets.dataset.cc359 import *
from ...assets.cross_val.one2one import *
from ...assets.batch_iter.patch_sampling_2d import *
from ...assets.architecture.unet2d import *
from ...assets.metric.segmentation import *
from ...assets.architecture.load_model import *


n_add_ids = 1  # 3
slice_sampling_interval = 36  # 3, 6, 12, 24, 36
pretrained = True

n_epochs = 60

# lr_main
lr_init = 1e-3
lr = Schedule(initial=lr_init, epoch2value_multiplier={45: 0.1, })

# inductive bias (`None` by default)
# alpha_l2sp = 0.1
# n_exps = 5
# reference_architecture = UNet2D(n_chans_in=n_chans_in, n_chans_out=n_chans_out, n_filters_init=n_filters)
#
# run_experiment = run(
#     fix_seed(seed=0xBAAAAAAD),
#     lock_dir(),
#     preload_model_fn(architecture=architecture, baseline_exp_path=baseline_exp_path),
#     preload_model_fn(architecture=reference_architecture, baseline_exp_path=baseline_exp_path),
#     architecture.to(device),
#     reference_architecture.to(device),
#     if_missing(lambda p: [train_model, save_model_state(architecture, p)], saved_model_path),
#     load_model_state(architecture, saved_model_path),
#     if_missing(predict_to_dir, output_path=test_predictions_path),
#     if_missing(evaluate_individual_metrics, results_path='test_metrics'),
# )
